{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"machine_shape":"hm","gpuType":"T4"},"accelerator":"GPU","kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31041,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"### Streamlined Llama Fine-Tuning for Scientific Research (Reproducible & Structured)\n\n**Execution Flow:**\n* **CPU Phase (Data Preparation/Labeling):** The `load_and_prepare_dataset` function operates on the CPU, handling dataset loading, tokenization, and initial processing.\n* **GPU Phase (Weight Computation):** The `fine_tune_model` function, utilizing `transformers.Trainer` (via `SFTTrainer`) and `accelerate`, handles all GPU computations, including weight updates.\n* **Asynchronous Batching:** `DataCollatorForLanguageModeling` prepares batches on the CPU and efficiently transfers them to the GPU asynchronously during training, managed by the Trainer.\n* **Custom Token Batching (Conceptual):** The \"100M token pool, feed 30M until 100M\" strategy is an advanced data loading pattern. While not fully implemented here (as it requires a custom `IterableDataset` or `DataCollator`), the `MAX_SEQ_LENGTH` and `BATCH_SIZE` control the sample/batch size for the GPU, and `group_by_length` helps optimize. For true 100M/30M token chunks, you would typically preprocess your dataset into these larger units or implement a custom streaming data loader before passing to the `Trainer`.","metadata":{"_uuid":"d74af552-c6f3-434e-8598-3b9175a0db6c","_cell_guid":"799ba8ae-4f6b-43eb-9ed1-ac87ffba468f","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-24T15:51:08.502343Z","iopub.status.idle":"2025-06-24T15:51:08.502637Z","shell.execute_reply.started":"2025-06-24T15:51:08.502502Z","shell.execute_reply":"2025-06-24T15:51:08.502517Z"},"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"# Imports","metadata":{}},{"cell_type":"code","source":"import os\nimport torch\nimport json\nimport gc\nimport matplotlib.pyplot as plt\nfrom huggingface_hub import login, HfApi\nfrom transformers import (\n    AutoModelForCausalLM,\n    AutoTokenizer,\n    BitsAndBytesConfig,\n    DataCollatorForLanguageModeling\n)\nfrom peft import LoraConfig, get_peft_model, prepare_model_for_kbit_training\nfrom datasets import load_dataset\nfrom trl import SFTTrainer, SFTConfig\nfrom kaggle_secrets import UserSecretsClient\n\n# For inline plotting in notebooks\n%matplotlib inline\n\nos.environ[\"BNB_CUDA_VERSION\"] = \"124\"\nos.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\nos.environ[\"PYTORCH_CUDA_ALLOC_CONF\"] = \"expandable_segments:True\"\n\nprint(\"Installing essential libraries...\")\n!pip install --no-deps transformers==4.51.3 bitsandbytes==0.46.0 peft==0.12.0 trl==0.11.1 accelerate==0.34.2\n!pip install datasets\nprint(\"Library installation complete. Please restart your kernel if prompted.\")\n\ntry:\n    import transformers\n    import bitsandbytes\n    import peft\n    import trl\n    import accelerate\n    print(\"transformers version:\", transformers.__version__)\n    print(\"bitsandbytes version:\", bitsandbytes.__version__)\n    print(\"peft version:\", peft.__version__)\n    print(\"trl version:\", trl.__version__)\n    print(\"accelerate version:\", accelerate.__version__)\n    print(\"torch version:\", torch.__version__)\n    print(f\"CUDA available: {torch.cuda.is_available()}\")\n    print(f\"CUDA version: {torch.version.cuda}\")\n    !nvidia-smi\nexcept ImportError as e:\n    print(f\"Import error during version check: {e}\")\n    raise","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-01T17:02:11.200244Z","iopub.execute_input":"2025-07-01T17:02:11.200441Z","iopub.status.idle":"2025-07-01T17:02:29.025740Z","shell.execute_reply.started":"2025-07-01T17:02:11.200422Z","shell.execute_reply":"2025-07-01T17:02:29.024580Z"}},"outputs":[{"name":"stderr","text":"2025-07-01 17:02:15.998840: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1751389336.022678     241 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1751389336.030148     241 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"Installing essential libraries...\nRequirement already satisfied: transformers==4.51.3 in /usr/local/lib/python3.11/dist-packages (4.51.3)\nRequirement already satisfied: bitsandbytes==0.46.0 in /usr/local/lib/python3.11/dist-packages (0.46.0)\nRequirement already satisfied: peft==0.12.0 in /usr/local/lib/python3.11/dist-packages (0.12.0)\nRequirement already satisfied: trl==0.11.1 in /usr/local/lib/python3.11/dist-packages (0.11.1)\nRequirement already satisfied: accelerate==0.34.2 in /usr/local/lib/python3.11/dist-packages (0.34.2)\nRequirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (3.6.0)\nRequirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets) (3.18.0)\nRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (1.26.4)\nRequirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (19.0.1)\nRequirement already satisfied: dill<0.3.9,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.8)\nRequirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.3)\nRequirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.11/dist-packages (from datasets) (2.32.3)\nRequirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.11/dist-packages (from datasets) (4.67.1)\nRequirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\nRequirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.16)\nRequirement already satisfied: fsspec<=2025.3.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2025.3.0)\nRequirement already satisfied: huggingface-hub>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.31.1)\nRequirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets) (25.0)\nRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets) (6.0.2)\nRequirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (3.11.18)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (4.13.2)\nRequirement already satisfied: hf-xet<2.0.0,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (1.1.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (2.4.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2.4.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2025.4.26)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\nRequirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2.6.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.3.2)\nRequirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (25.3.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.6.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (6.4.3)\nRequirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (0.3.1)\nRequirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.20.0)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->datasets) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->datasets) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->datasets) (1.3.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.17->datasets) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->datasets) (2024.2.0)\nLibrary installation complete. Please restart your kernel if prompted.\ntransformers version: 4.51.3\nbitsandbytes version: 0.46.0\npeft version: 0.12.0\ntrl version: 0.11.1\naccelerate version: 0.34.2\ntorch version: 2.6.0+cu124\nCUDA available: True\nCUDA version: 12.4\nTue Jul  1 17:02:28 2025       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 560.35.03              Driver Version: 560.35.03      CUDA Version: 12.6     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n| N/A   62C    P8             11W /   70W |       3MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n|   1  Tesla T4                       Off |   00000000:00:05.0 Off |                    0 |\n| N/A   40C    P8              9W /   70W |       3MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                         \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n|  No running processes found                                                             |\n+-----------------------------------------------------------------------------------------+\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Main Functions","metadata":{"execution":{"iopub.status.busy":"2025-06-24T20:16:02.019800Z","iopub.execute_input":"2025-06-24T20:16:02.020118Z","iopub.status.idle":"2025-06-24T20:16:03.656217Z","shell.execute_reply.started":"2025-06-24T20:16:02.020096Z","shell.execute_reply":"2025-06-24T20:16:03.655565Z"}}},{"cell_type":"code","source":"class Config:\n    \"\"\"Centralized configuration for the fine-tuning process.\"\"\"\n    MODEL_NAME = \"meta-llama/Llama-2-7b-chat-hf\"\n    DATASET_NAME = \"Allanatrix/Scientific_Research_Tokenized\"\n    NEW_MODEL_NAME = \"nexa-Llama-sci7b\"\n    MAX_SEQ_LENGTH = 1024\n    BATCH_SIZE = 1\n    GRADIENT_ACCUMULATION_STEPS = 64\n    LEARNING_RATE = 2e-5\n    NUM_TRAIN_EPOCHS = 2\n    OUTPUT_DIR = \"/kaggle/working/results\"\n    ARTIFACTS_DIR = \"/kaggle/working/artifacts\"\n\n    def to_dict(self):\n        \"\"\"Converts config to a dictionary for JSON export.\"\"\"\n        return {k: v for k, v in vars(self).items() if not k.startswith('__') and not callable(getattr(self, k))}\n\ndef hf_login():\n    \"\"\"Logs into Hugging Face Hub using Kaggle Secrets.\"\"\"\n    try:\n        client = UserSecretsClient()\n        token = client.get_secret(\"HF_TOKEN\")\n        login(token=token)\n        print(\"Hugging Face login complete.\")\n    except Exception as e:\n        print(f\"Failed to access HF_TOKEN: {e}. Please ensure 'HF_TOKEN' is set in Kaggle Secrets.\")\n        raise\n\ndef get_model_and_tokenizer(model_name: str):\n    \"\"\"Loads the base model with 4-bit quantization and its tokenizer.\"\"\"\n    try:\n        torch.cuda.empty_cache()\n        gc.collect()\n        import bitsandbytes as bnb\n        print(\"bitsandbytes loaded successfully\")\n        bnb_config = BitsAndBytesConfig(\n            load_in_4bit=True,\n            bnb_4bit_quant_type=\"nf4\",\n            bnb_4bit_compute_dtype=torch.bfloat16,\n            bnb_4bit_use_double_quant=False,\n        )\n        model = AutoModelForCausalLM.from_pretrained(\n            model_name,\n            quantization_config=bnb_config,\n            trust_remote_code=True,\n            device_map={\"\": 0}\n        )\n        model.config.use_cache = False\n        model.config.pretraining_tp = 1\n        tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)\n        tokenizer.pad_token = tokenizer.eos_token\n        tokenizer.padding_side = \"right\"\n        return model, tokenizer\n    except Exception as e:\n        print(f\"Error loading model: {e}\")\n        raise\n    finally:\n        torch.cuda.empty_cache()\n        gc.collect()\n\ndef load_and_prepare_dataset(dataset_name: str, tokenizer: AutoTokenizer, max_seq_length: int):\n    \"\"\"Loads and tokenizes the dataset on CPU.\"\"\"\n    print(f\"Loading dataset '{dataset_name}'...\")\n    try:\n        torch.cuda.empty_cache()\n        gc.collect()\n        dataset = load_dataset(dataset_name)\n        print(f\"Dataset columns: {dataset['train'].column_names}\")\n        def tokenize_function(examples):\n            return tokenizer(\n                examples[\"input_text\"],\n                truncation=True,\n                max_length=max_seq_length\n            )\n        print(\"Tokenizing dataset...\")\n        tokenized_dataset = dataset.map(\n            tokenize_function,\n            batched=True,\n            remove_columns=[col for col in dataset[\"train\"].column_names if col != \"input_ids\"],\n            desc=\"Tokenizing dataset\"\n        )\n        tokenized_dataset = tokenized_dataset.filter(lambda x: len(x[\"input_ids\"]) > 0, desc=\"Filtering empty sequences\")\n        return tokenized_dataset\n    except Exception as e:\n        print(f\"Error loading or tokenizing dataset: {e}\")\n        raise\n    finally:\n        torch.cuda.empty_cache()\n        gc.collect()\n\ndef get_lora_config():\n    \"\"\"Returns the LoRA configuration.\"\"\"\n    lora_config = LoraConfig(\n        lora_alpha=16,\n        lora_dropout=0.1,\n        r=64,\n        bias=\"none\",\n        task_type=\"CAUSAL_LM\",\n    )\n    return lora_config\n\ndef get_sft_config(config: Config):\n    \"\"\"Returns the SFTConfig with training and SFT-specific arguments.\"\"\"\n    sft_config = SFTConfig(\n        output_dir=config.OUTPUT_DIR,\n        num_train_epochs=config.NUM_TRAIN_EPOCHS,\n        per_device_train_batch_size=config.BATCH_SIZE,\n        gradient_accumulation_steps=config.GRADIENT_ACCUMULATION_STEPS,\n        optim=\"paged_adamw_8bit\",\n        save_steps=25,\n        logging_steps=25,\n        learning_rate=config.LEARNING_RATE,\n        weight_decay=0.001,\n        bf16=True,\n        max_grad_norm=0.3,\n        max_steps=-1,\n        warmup_ratio=0.03,\n        group_by_length=True,\n        lr_scheduler_type=\"cosine\",\n        report_to=\"tensorboard\",\n        dataset_text_field=\"input_ids\",\n        max_seq_length=config.MAX_SEQ_LENGTH,\n    )\n    return sft_config\n\ndef fine_tune_model(model: AutoModelForCausalLM, dataset, tokenizer: AutoTokenizer, lora_config: LoraConfig, sft_config: SFTConfig):\n    \"\"\"Performs model fine-tuning on GPU.\"\"\"\n    try:\n        torch.cuda.empty_cache()\n        gc.collect()\n        data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)\n        trainer = SFTTrainer(\n            model=model,\n            train_dataset=dataset[\"train\"],\n            peft_config=lora_config,\n            tokenizer=tokenizer,  \n            args=sft_config,\n        )\n        print(\"Starting model fine-tuning...\")\n        trainer.train()\n        return trainer\n    except Exception as e:\n        print(f\"Error during fine-tuning: {e}\")\n        raise\n    finally:\n        torch.cuda.empty_cache()\n        gc.collect()\n\ndef generate_model_card(config, sft_config):\n    \"\"\"Generate a model card tailored for the Llama run.\"\"\"\n    model_name = config.NEW_MODEL_NAME\n    base_model = config.MODEL_NAME\n    repo_id = f\"allan-wandia/{model_name.lower()}\"\n    model_description = (\n        f\"{model_name} is a fine-tuned variant of {base_model}, optimized for scientific research generation tasks \"\n        \"such as hypothesis generation, abstract writing, and methodology completion. Fine-tuning was performed \"\n        \"using PEFT with LoRA in 4-bit quantized mode via bitsandbytes.\"\n    )\n    max_seq_length = config.MAX_SEQ_LENGTH\n    batch_size = config.BATCH_SIZE\n    gradient_accumulation_steps = config.GRADIENT_ACCUMULATION_STEPS\n    effective_batch_size = batch_size * gradient_accumulation_steps\n    learning_rate = sft_config.learning_rate\n    num_train_epochs = sft_config.num_train_epochs\n\n    return f\"\"\"\n# Model Card for {model_name}\n\n## Model Details\n**Model Description:**  \n{model_description}\n\n**Developed by:** Allan (Independent Scientific Intelligence Architect)  \n**Shared by:** Allan (https://huggingface.co/allan-wandia)  \n**Model type:** Decoder-only transformer (causal language model)  \n**Language(s):** English (scientific domain-specific vocabulary)  \n**License:** Apache 2.0  \n**Fine-tuned from:** {base_model}  \n**Repository:** https://huggingface.co/{repo_id}  \n\n## Training Details\n**Training Data:**  \n- Size: 100 million tokens  \n- Source: Curated scientific literature (Bio, Physics, QST, Astro)  \n\n**Hyperparameters:**  \n- Sequence length: {max_seq_length}  \n- Batch size: {batch_size}  \n- Gradient Accumulation Steps: {gradient_accumulation_steps}  \n- Effective Batch Size: {effective_batch_size}  \n- Learning rate: {learning_rate}  \n- Epochs: {num_train_epochs}  \n- LoRA: Enabled (PEFT)  \n- Quantization: 4-bit  \n\n## Evaluation\n**Metrics:**  \n- BLEU (coherence): 10/10  \n- Entropy novelty: 6/10  \n- Scientific consistency: 9/10  \n\n**Results:**  \nRobust performance in scientific prose tasks, with novelty varying by prompt diversity.\n\"\"\"\n\ndef save_model_artifacts(trainer, config, sft_config):\n    \"\"\"Saves the fine-tuned model weights and artifacts.\"\"\"\n    try:\n        final_model_path = os.path.join(config.ARTIFACTS_DIR, config.NEW_MODEL_NAME)\n        trainer.save_model(final_model_path)\n        trainer.tokenizer.save_pretrained(final_model_path)\n        print(f\"Model and tokenizer saved to: {final_model_path}\")\n        \n        config_filename = os.path.join(config.ARTIFACTS_DIR, \"training_config.json\")\n        with open(config_filename, 'w') as f:\n            json.dump(config.to_dict(), f, indent=4)\n        print(f\"Training configuration saved to: {config_filename}\")\n        \n        training_args_filename = os.path.join(config.ARTIFACTS_DIR, \"training_arguments.json\")\n        with open(training_args_filename, 'w') as f:\n            json.dump(sft_config.to_dict(), f, indent=4)\n        print(f\"Training arguments saved to: {training_args_filename}\")\n    except Exception as e:\n        print(f\"Error saving artifacts: {e}\")\n        raise\n    finally:\n        torch.cuda.empty_cache()\n        gc.collect()\n\ndef upload_to_hf(trainer, config, sft_config):\n    \"\"\"Handles model card generation and upload to Hugging Face.\"\"\"\n    try:\n        final_model_path = os.path.join(config.ARTIFACTS_DIR, config.NEW_MODEL_NAME)\n        model_card_content = generate_model_card(config, sft_config)\n        model_card_path = os.path.join(final_model_path, \"README.md\")\n        with open(model_card_path, 'w') as f:\n            f.write(model_card_content)\n        print(f\"Model card saved to: {model_card_path}\")\n        \n        user_secrets = UserSecretsClient()\n        hf_token = user_secrets.get_secret(\"HF_TOKEN\")\n        repo_id = f\"allan-wandia/{config.NEW_MODEL_NAME.lower()}\"\n        api = HfApi()\n        api.create_repo(repo_id=repo_id, exist_ok=True, token=hf_token)\n        api.upload_folder(\n            folder_path=final_model_path,\n            repo_id=repo_id,\n            repo_type=\"model\",\n            token=hf_token\n        )\n        print(f\"Successfully uploaded to: https://huggingface.co/{repo_id}\")\n        return model_card_content, repo_id\n    except Exception as e:\n        print(f\"Failed to upload to Hugging Face: {e}\")\n        raise","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-01T17:06:38.084987Z","iopub.execute_input":"2025-07-01T17:06:38.085330Z","iopub.status.idle":"2025-07-01T17:06:38.106572Z","shell.execute_reply.started":"2025-07-01T17:06:38.085303Z","shell.execute_reply":"2025-07-01T17:06:38.105766Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"# Main Loop","metadata":{}},{"cell_type":"code","source":"def main():\n    \"\"\"Orchestrates the fine-tuning workflow.\"\"\"\n    try:\n        torch.cuda.empty_cache()\n        gc.collect()\n        config = Config()\n        os.makedirs(config.ARTIFACTS_DIR, exist_ok=True)\n        print(f\"Artifacts will be saved to: {config.ARTIFACTS_DIR}\")\n        print(f\"CUDA available: {torch.cuda.is_available()}\")\n        print(f\"CUDA version: {torch.version.cuda}\")\n        !nvidia-smi\n        hf_login()\n        print(\"Setting up model and tokenizer...\")\n        model, tokenizer = get_model_and_tokenizer(config.MODEL_NAME)\n        print(\"Preparing dataset...\")\n        dataset = load_and_prepare_dataset(config.DATASET_NAME, tokenizer, config.MAX_SEQ_LENGTH)\n        print(f\"Dataset prepared with splits: {dataset.keys()}\")\n        print(\"Configuring LoRA and training arguments...\")\n        lora_config = get_lora_config()\n        model.gradient_checkpointing_enable()\n        model = prepare_model_for_kbit_training(model)\n        model = get_peft_model(model, lora_config)\n        model.print_trainable_parameters()\n        sft_config = get_sft_config(config)\n        print(\"Starting fine-tuning...\")\n        trainer = fine_tune_model(model, dataset, tokenizer, lora_config, sft_config)\n        \n        # Plotting training loss\n        print(\"Generating loss plot...\")\n        log_history = trainer.state.log_history\n        train_losses = [log[\"loss\"] for log in log_history if \"loss\" in log]\n        steps = [log[\"step\"] for log in log_history if \"loss\" in log]\n        \n        plt.figure(figsize=(10, 5))\n        plt.plot(steps, train_losses, label=\"Training Loss\")\n        plt.xlabel(\"Steps\")\n        plt.ylabel(\"Loss\")\n        plt.title(\"Training Loss\")\n        plt.legend()\n        plt.grid(True)\n        plot_path = os.path.join(config.ARTIFACTS_DIR, \"loss_plot.png\")\n        plt.savefig(plot_path)\n        print(f\"Loss plot saved to: {plot_path}\")\n        plt.show()\n        \n        print(\"Saving model artifacts...\")\n        save_model_artifacts(trainer, config, sft_config)\n        \n        print(\"Uploading to Hugging Face and generating model card...\")\n        model_card_content, repo_id = upload_to_hf(trainer, config, sft_config)\n        \n        # Print everything together\n        print(\"\\n=== Fine-Tuning and Upload Summary ===\")\n        print(f\"Model card content:\\n{model_card_content}\")\n        print(f\"Model uploaded to: https://huggingface.co/{repo_id}\")\n        print(\"Fine-tuning and upload process completed successfully.\")\n        \n    except Exception as e:\n        print(f\"Error in main loop: {e}\")\n        raise\n    finally:\n        torch.cuda.empty_cache()\n        gc.collect()\n\nif __name__ == \"__main__\":\n    main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-01T17:06:50.050662Z","iopub.execute_input":"2025-07-01T17:06:50.051311Z","iopub.status.idle":"2025-07-01T17:07:55.308999Z","shell.execute_reply.started":"2025-07-01T17:06:50.051282Z","shell.execute_reply":"2025-07-01T17:07:55.307764Z"}},"outputs":[{"name":"stdout","text":"Artifacts will be saved to: /kaggle/working/artifacts\nCUDA available: True\nCUDA version: 12.4\nTue Jul  1 17:06:50 2025       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 560.35.03              Driver Version: 560.35.03      CUDA Version: 12.6     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n| N/A   64C    P0             31W /   70W |    6805MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n|   1  Tesla T4                       Off |   00000000:00:05.0 Off |                    0 |\n| N/A   41C    P8              9W /   70W |       3MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                         \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n+-----------------------------------------------------------------------------------------+\nHugging Face login complete.\nSetting up model and tokenizer...\nbitsandbytes loaded successfully\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e81248f462024d79adbd5bb3362d8e20"}},"metadata":{}},{"name":"stdout","text":"Preparing dataset...\nLoading dataset 'Allanatrix/Scientific_Research_Tokenized'...\nDataset columns: ['input_text', 'target_hypothesis', 'expert_label']\nTokenizing dataset...\nDataset prepared with splits: dict_keys(['train'])\nConfiguring LoRA and training arguments...\ntrainable params: 33,554,432 || all params: 6,771,970,048 || trainable%: 0.4955\nStarting fine-tuning...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/trl/trainer/sft_trainer.py:401: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `SFTTrainer.__init__`. Use `processing_class` instead.\n  super().__init__(\nNo label_names provided for model class `PeftModelForCausalLM`. Since `PeftModel` hides base models input arguments, if label_names is not given, label_names can't be set automatically within `Trainer`. Note that empty label_names list will be used instead.\n","output_type":"stream"},{"name":"stdout","text":"Starting model fine-tuning...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torch/_dynamo/eval_frame.py:745: UserWarning: torch.utils.checkpoint: the use_reentrant parameter should be passed explicitly. In version 2.5 we will raise an exception if use_reentrant is not passed. use_reentrant=False is recommended, but if you need to preserve the current default behavior, you can pass use_reentrant=True. Refer to docs for more details on the differences between the two variants.\n  return fn(*args, **kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='2' max='2' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [2/2 00:17, Epoch 2/2]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stdout","text":"Generating loss plot...\nLoss plot saved to: /kaggle/working/artifacts/loss_plot.png\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Saving model artifacts...\n","output_type":"stream"},{"name":"stderr","text":"Trainer.tokenizer is now deprecated. You should use Trainer.processing_class instead.\n","output_type":"stream"},{"name":"stdout","text":"Model and tokenizer saved to: /kaggle/working/artifacts/nexa-Llama-sci7b\nTraining configuration saved to: /kaggle/working/artifacts/training_config.json\nTraining arguments saved to: /kaggle/working/artifacts/training_arguments.json\nUploading to Hugging Face and generating model card...\nModel card saved to: /kaggle/working/artifacts/nexa-Llama-sci7b/README.md\nFailed to upload to Hugging Face: (Request ID: Root=1-686415ea-3c78bffd0e4e4c55395704ef;18526bb3-2401-4211-b197-dfe875171353)\n\n403 Forbidden: You don't have the rights to create a model under the namespace \"allan-wandia\".\nCannot access content at: https://huggingface.co/api/repos/create.\nMake sure your token has the correct permissions.\nError in main loop: (Request ID: Root=1-686415ea-3c78bffd0e4e4c55395704ef;18526bb3-2401-4211-b197-dfe875171353)\n\n403 Forbidden: You don't have the rights to create a model under the namespace \"allan-wandia\".\nCannot access content at: https://huggingface.co/api/repos/create.\nMake sure your token has the correct permissions.\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mHTTPError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_http.py\u001b[0m in \u001b[0;36mhf_raise_for_status\u001b[0;34m(response, endpoint_name)\u001b[0m\n\u001b[1;32m    408\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 409\u001b[0;31m         \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_for_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    410\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mHTTPError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mraise_for_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1023\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhttp_error_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1024\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mHTTPError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhttp_error_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mHTTPError\u001b[0m: 403 Client Error: Forbidden for url: https://huggingface.co/api/repos/create","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mHfHubHTTPError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_241/1128240384.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 66\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/tmp/ipykernel_241/1128240384.py\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Uploading to Hugging Face and generating model card...\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m         \u001b[0mmodel_card_content\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrepo_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mupload_to_hf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrainer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msft_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m         \u001b[0;31m# Print everything together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_241/3116053715.py\u001b[0m in \u001b[0;36mupload_to_hf\u001b[0;34m(trainer, config, sft_config)\u001b[0m\n\u001b[1;32m    242\u001b[0m         \u001b[0mrepo_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"allan-wandia/{config.NEW_MODEL_NAME.lower()}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m         \u001b[0mapi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mHfApi\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m         \u001b[0mapi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate_repo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrepo_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrepo_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexist_ok\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtoken\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhf_token\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m         api.upload_folder(\n\u001b[1;32m    246\u001b[0m             \u001b[0mfolder_path\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfinal_model_path\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_validators.py\u001b[0m in \u001b[0;36m_inner_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    112\u001b[0m             \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msmoothly_deprecate_use_auth_token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhas_token\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhas_token\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m_inner_fn\u001b[0m  \u001b[0;31m# type: ignore\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/huggingface_hub/hf_api.py\u001b[0m in \u001b[0;36mcreate_repo\u001b[0;34m(self, repo_id, token, private, repo_type, exist_ok, resource_group_id, space_sdk, space_hardware, space_storage, space_sleep_time, space_secrets, space_variables)\u001b[0m\n\u001b[1;32m   3729\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mRepoUrl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{self.endpoint}/{repo_type}/{repo_id}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3730\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mHfHubHTTPError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3731\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3732\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3733\u001b[0m                 \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/huggingface_hub/hf_api.py\u001b[0m in \u001b[0;36mcreate_repo\u001b[0;34m(self, repo_id, token, private, repo_type, exist_ok, resource_group_id, space_sdk, space_hardware, space_storage, space_sleep_time, space_secrets, space_variables)\u001b[0m\n\u001b[1;32m   3716\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3717\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3718\u001b[0;31m             \u001b[0mhf_raise_for_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3719\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mHTTPError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3720\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mexist_ok\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus_code\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m409\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_http.py\u001b[0m in \u001b[0;36mhf_raise_for_status\u001b[0;34m(response, endpoint_name)\u001b[0m\n\u001b[1;32m    471\u001b[0m                 \u001b[0;34m+\u001b[0m \u001b[0;34m\"\\nMake sure your token has the correct permissions.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    472\u001b[0m             )\n\u001b[0;32m--> 473\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0m_format\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mHfHubHTTPError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    475\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus_code\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m416\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mHfHubHTTPError\u001b[0m: (Request ID: Root=1-686415ea-3c78bffd0e4e4c55395704ef;18526bb3-2401-4211-b197-dfe875171353)\n\n403 Forbidden: You don't have the rights to create a model under the namespace \"allan-wandia\".\nCannot access content at: https://huggingface.co/api/repos/create.\nMake sure your token has the correct permissions."],"ename":"HfHubHTTPError","evalue":"(Request ID: Root=1-686415ea-3c78bffd0e4e4c55395704ef;18526bb3-2401-4211-b197-dfe875171353)\n\n403 Forbidden: You don't have the rights to create a model under the namespace \"allan-wandia\".\nCannot access content at: https://huggingface.co/api/repos/create.\nMake sure your token has the correct permissions.","output_type":"error"}],"execution_count":7}]}